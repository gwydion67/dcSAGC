#!/bin/bash

                ###############################################################################################################
                #                          dcSAGC - delete/create {SYNC, ALIAS, GITHUB, CONFIG} files                         #
                #  Automate the unique process(by proffapt) for syncing your config files from your local machine to github.  #
                #                                                                                                             #
                #         Author: Arpit Bhardwaj(proffapt)                                                                    #
                #         Twitter: @proffapt                                                                                  #
                #         Github: proffapt                                                                                    #
                #         Gitlab: proffapt                                                                                    #
                #         Telegram: @proffapt                                                                                 #
                #         Email: proffapt@protonmail.com                                                                      #
                #         Facebook: I Don't Want My Data To Be Available On DarkWeb lol                                       #
                #                                                                                                             #
                #                  License: BSD License 2.0                                                                   #
                #                  Note: If You find any bugs in dcSAGC, please REPORT it to me                               #
                #                  by creating an Issue; Or if you have a fix, create a Pull Request.                         #
                #                                                                                                             #
                ###############################################################################################################

## Colors

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
ORANGE=$(tput setaf 9)

## BANNER and USAGE

BANNER="$(clear)
              #############################################################################################
              #                  ${YELLOW}dcSAGC${WHITE} - ${BLUE}delete/create {SYNC, ALIAS, GITHUB, CONFIG} files${WHITE}               #
              #                                                                                           #
              #    ${GREEN}Author${WHITE}: ${CYAN}Arpit Bhardwaj(proffapt)${WHITE}                                                       #
              #    ${GREEN}Twitter${WHITE}: ${CYAN}@proffapt${WHITE}                                                                     #
              #    ${GREEN}Github${WHITE}: ${CYAN}proffapt${WHITE}                                                                       #
              #    ${GREEN}Gitlab${WHITE}: ${CYAN}proffapt${WHITE}                                                                       #
              #    ${GREEN}Telegram${WHITE}: ${CYAN}@proffapt${WHITE}                                                                    #
              #    ${GREEN}Email${WHITE}: ${CYAN}proffapt@protonmail.com${WHITE}                                                         #
              #    ${GREEN}Facebook${WHITE}: ${ORANGE}I Don't Want My Data To Be Available On DarkWeb lol${WHITE}                          #
              #                                                                                           #
              #           ${GREEN}License${WHITE}: ${CYAN}BSD License 2.0${WHITE}                                                        #
              #           ${RED}Note:${WHITE} ${PURPLE}If You find any bugs in dcSAGC, please REPORT it to me ${WHITE}                   #
              #           ${PURPLE}by creating an Issue; Or if you have a fix, create a Pull Request.${WHITE}              #
              #                                                                                           #
              #############################################################################################

              ${YELLOW}Automate the unique process for syncing your config files from your local machine to github.${WHITE}"


USAGE="$BANNER

${BLUE}USAGE:${WHITE} $(basename "$0") [${ORANGE}delete/create/default${WHITE}] [${RED}-s${WHITE} ${CYAN}<path_to_syncscript>${WHITE}] [${RED}-a${WHITE} ${CYAN}<name_of_alias>${WHITE}] [${RED}-g${WHITE} ${CYAN}<path_to_github_folder>${WHITE}] [${RED}-c${WHITE} ${CYAN}<path_to_config_file>${WHITE}]

${BLUE}where:${WHITE}
    ${RED}create${WHITE}  : Mode to setup auto-syncing
    ${RED}delete${WHITE}  : Mode to revert everything back to original state
    ${RED}default${WHITE} : Mode to store default value(s) for ${ORANGE}-g${WHITE} arg(s)

    ${RED}-s${WHITE} : Specify path of syncscript
    ${RED}-a${WHITE} : Specify alias to be used to edit the config file, after create mode
    ${RED}-g${WHITE} : Specify path of dir which will be used as github's main dir for syncing
    ${RED}-c${WHITE} : Specify path of configuration file
    ${RED}-h${WHITE} : Show this help message
${RED}>>>> ${YELLOW}If something doesn't exist this tool will create that for you, if it already exists this tool will use that${WHITE}

${BLUE}Example(s):${WHITE}
    $(basename "$0") ${ORANGE}create${WHITE} ${RED}-s${WHITE} ${CYAN}~/Desktop/sync_scripts/bashrc_syncer${WHITE} ${RED}-a${WHITE} ${CYAN}bashrc.edit${WHITE} ${RED}-g${WHITE} ${CYAN}~/Desktop/configs/bashrc/${WHITE} ${RED}-c${WHITE} ${CYAN}~/.bashrc${WHITE}
${ORANGE}>>>> ${YELLOW}Use ${GREEN}bashrc.edit ${YELLOW}to edit this config file in future; as you end editing, changes will be synced to your github repo${WHITE}
    $(basename "$0") ${ORANGE}delete${WHITE} ${RED}-s${WHITE} ${CYAN}~/Desktop/sync_scripts/bashrc_syncer${WHITE} ${RED}-a${WHITE} ${CYAN}bashrc.edit${WHITE} ${RED}-g${WHITE} ${CYAN}~/Desktop/configs/bashrc/${WHITE} ${RED}-c${WHITE} ${CYAN}~/.bashrc${WHITE}
    $(basename "$0") ${ORANGE}default${WHITE} ${RED}-g${WHITE} ${CYAN}~/Desktop/configs/${WHITE}
    "

# Functions for create mode
# <start>
fav_text_editor(){
    TEXT_EDITOR_FILE=$SCRIPT_LOCATION/.fav_editor 

    if [[ ! -f $TEXT_EDITOR_FILE ]]; then
        read -rp "$(echo -e "${GREEN}[*] ${CYAN}Enter the path/alias for your fav text editor:${WHITE} ")" TEXT_EDITOR
        echo "TEXT_EDITOR=$TEXT_EDITOR" > "$TEXT_EDITOR_FILE"
		echo -e "${GREEN}[+] ${BLUE}Setting $TEXT_EDITOR as your default text editor for this tool${WHITE}"
        source "$TEXT_EDITOR_FILE"
    else
        source "$TEXT_EDITOR_FILE"
		echo -e "${GREEN}[+] ${BLUE}Using $TEXT_EDITOR as editor ${CYAN}[change in $SCRIPT_LOCATION/.fav_editor]${WHITE}"
    fi
}

create_config_file() {
	if [[ ! -f "$CONFIG_FILE_location" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Creating configuration file${WHITE}"

		"$TEXT_EDITOR" "$CONFIG_FILE_location"
	else
		echo -e "${YELLOW}[-] ${BLUE}Configuration file already exists!${WHITE}"
	fi
}

create_git_folder() {
	if [[ ! -d "$GIT_MAIN_FOLDER_location" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Creating local github folder${WHITE}"

		mkdir "$GIT_MAIN_FOLDER_location"
	else
		echo -e "${YELLOW}[-] ${BLUE}Local github folder already exists!${WHITE}"
	fi
}

create_remote_github_repo() {
	read -rp "$(echo -e "${GREEN}[*] ${CYAN}Do you want to create a new github repository or use already existing one? [new/existing]:${WHITE} ")" ANSWER

	if [[ $ANSWER == new ]]; then
		echo -e "${GREEN}[+] ${BLUE}Creating repository on github..${WHITE}"

		read -rp "$(echo -e "${GREEN}[*] ${CYAN}Enter the github repository name to be created and used ['owner/repo_name']:${WHITE} ")" NEW_ORIGIN
		read -rp "$(echo -e "${GREEN}[*] ${CYAN}Specify the visibility to set for repository [public/private]:${WHITE} ")" VISIBILITY

		gh repo create https://github.com/"$NEW_ORIGIN" --"$VISIBILITY" --description "Git repo for syncing $CONFIG_FILE in real-time"
		git remote add origin https://github.com/"$NEW_ORIGIN"
	elif [[ $ANSWER == existing ]]; then
		echo -e "${YELLOW}[-] ${BLUE}Skipping the creation of remote repository on github${WHITE}"

		read -rp "$(echo -e "${GREEN}[*] ${CYAN}Enter already existing github repository name to be used ['owner/repo_name']:${WHITE} ")"EXISTING_ORIGIN
		echo -e "${GREEN}[+] ${BLUE}Using already existing github repository${WHITE}"

		git remote add origin https://github.com/"$EXISTING_ORIGIN"
	else
		cd "$CURRENT_LOCATION" || exit
		
        ERROR_invalid_input
	fi
}

initialise_git(){
    cd "$GIT_MAIN_FOLDER_location" || exit

	if [[ ! -d ".git" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Initialising git in the github folder${WHITE}"

		git init
		git branch -m main
		## Logic for github remote repo
		create_remote_github_repo
	else
		echo -e "${YELLOW}[-] ${BLUE}Git is already initialised in the github folder!${WHITE}"

		git branch -m main

		## checking the existence of remote github repo in the .git folder
		REMOTE_TEST=$(git remote | grep origin >/dev/null && echo "69")

		if [[ $REMOTE_TEST != 69 ]]; then
			echo -e "${CYAN}[~] ${BLUE}Remote repo as origin doesn't exist!${WHITE}"

			## Logic for github remote repo
			create_remote_github_repo
		elif [[ $REMOTE_TEST == 69 ]]; then
			echo -e "${YELLOW}[-] ${BLUE}Remote repo as origin exists!${WHITE}"
		fi
	fi

    cd "$CURRENT_LOCATION" || exit
}

create_readme() {
    cd "$GIT_MAIN_FOLDER_location" || exit

	if [[ ! -f "README.md" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Creating README.md file in the github folder${WHITE}"

		echo "# Edit it" > README.md
        echo "This is sample README.md file, generated by dcSAGC(author @proffapt)" >> README.md
        git add README.md
        git commit -m "adding README.md via dcSAGC tool by proffapt"
	else
		echo -e "${YELLOW}[-] ${BLUE}README.md file already exists in the github folder!${WHITE}"
	fi

    cd "$CURRENT_LOCATION" || exit
}

move_config_to_git_folder() {
	if [[ ! -f "$new_CONFIG_FILE_LOCATION" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Moving the configuration file to github folder${WHITE}"

		mv "$CONFIG_FILE_location" "$GIT_MAIN_FOLDER_location"
	else
		echo -e "${YELLOW}[-] ${BLUE}Configuration file already exist in the github folder${WHITE}"
	fi
}

create_link_to_config() {
	if [[ ! -f "$CONFIG_FILE_location" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Creating Configuration link file from configuration file in github folder${WHITE}"

		ln -s "$new_CONFIG_FILE_LOCATION" "$CONFIG_FILE_location"
	else
		echo -e "${YELLOW}[-] ${BLUE}Configuration link file already exists!${WHITE}"
	fi
}

create_syncscript() {
    if [[ ! -f "$SYNC_SCRIPT_location" ]]; then
        echo -e "${GREEN}[+] ${BLUE}Creating configuration syncscript${WHITE}"

        echo "#!/bin/bash" > "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "CURR_LOCATION=\$(pwd)" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "cd $GIT_MAIN_FOLDER_location || exit" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "check_CHANGES=\$(git status --porcelain | grep -q "$CONFIG_FILE" && echo 69)" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "if [[ \$check_CHANGES != 69 ]]; then" >> "$SYNC_SCRIPT_location"
        echo "    cd \$CURR_LOCATION" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "    echo \$(tput setaf 2)" >> "$SYNC_SCRIPT_location"
        echo "    echo '>> No changes were made'" >> "$SYNC_SCRIPT_location"
        echo "    echo \$(tput setaf 7)" >> "$SYNC_SCRIPT_location"
        echo "else" >> "$SYNC_SCRIPT_location"
        echo "    git add $CONFIG_FILE" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "    echo \$(tput setaf 3)" >> "$SYNC_SCRIPT_location"
        echo "    echo '> COMMITTING UPDATES'" >> "$SYNC_SCRIPT_location"
        echo "    echo -ne \$(tput setaf 7)" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "    git commit -m 'updating $CONFIG_FILE via shell script'" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "    echo -ne \$(tput setaf 2)" >> "$SYNC_SCRIPT_location"
        echo "    echo '> PUSHING UPDATES'" >> "$SYNC_SCRIPT_location"
        echo "    echo -ne \$(tput setaf 7)" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "    git push -u origin main" >> "$SYNC_SCRIPT_location"
        echo "    cd \$CURR_LOCATION || exit" >> "$SYNC_SCRIPT_location"
        echo "" >> "$SYNC_SCRIPT_location"
        echo "    echo" >> "$SYNC_SCRIPT_location"
        echo "fi" >> "$SYNC_SCRIPT_location"

        echo -e "${GREEN}[+] ${BLUE}Making it executable${WHITE}"
        chmod +x "$SYNC_SCRIPT_location"
    else
		echo -e "${YELLOW}[-] ${BLUE}Configuration syncscript already exists!${WHITE}"
	fi
}

push_syncscript() {
	if [[ -d "$git_SYNC_SCRIPT_folder" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Syncing configuration syncscript to it's github repo${WHITE}"

		cd "$SYNC_SCRIPT_folder" || exit
		git add "$SYNC_SCRIPT"
		git commit -m "initial commit for $SYNC_SCRIPT"
		git push -u origin main
		cd "$CURRENT_LOCATION" || exit
	else
		echo -e "${YELLOW}[-] ${BLUE}The configuration syncscript containing folder isn't git initialised${WHITE}"
	fi
}

create_alias(){
    ## Checking whether the specified remote repo alias exists or not
	ALIAS_TEST=$(cat "$SHELL_file" | grep -q "$ALIAS"= && echo 69)

    if [[ $ALIAS_TEST != 69 ]]; then
        echo -e "${GREEN}[+] ${BLUE}Adding the alias to SHELL configuration file${WHITE}"

	    echo "alias $ALIAS='$TEXT_EDITOR $CONFIG_FILE_location && $SYNC_SCRIPT_location'" >> "$SHELL_file"
    else
        echo -e "${YELLOW}[-] ${BLUE}Alias already exists in SHELL configuration file${WHITE}"
    fi
}

sync_configuration_file(){
    cd $GIT_MAIN_FOLDER_location
    check_CHANGES=$(git status --porcelain | grep -q "$CONFIG_FILE" && echo 69)

    if [[ "$check_CHANGES" != 69 ]]; then
        echo -e "${YELLOW}[-] ${BLUE}There are no changes in configuration file, Skipping pushing to github${WHITE}"
        echo
    else
        echo -e "${GREEN}[+] ${BLUE}Syncing the configuration file to github${WHITE}"

        $SYNC_SCRIPT_location
    fi

    cd $CURRENT_LOCATION
}
# </start>

# Functions for delete mode
# <start>
delete_link() {
	if [[ -f "$CONFIG_FILE_location" ]]; then
		if [[ -L "$CONFIG_FILE_location" ]]; then
			echo -e "${GREEN}[+] ${BLUE}Removing configuration link file${WHITE}"

			rm "$CONFIG_FILE_location"
		else
			echo -e "${YELLOW}[-] ${BLUE}This file at configuration location is not a link!${WHITE}"
		fi
	else
		echo -e "${YELLOW}[-] ${BLUE}Configuration link file doesn't exist!${WHITE}"
	fi
}

put_back_config_file() {
	if [[ -f "$new_CONFIG_FILE_LOCATION" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Putting configuration file back to it's original location from github folder${WHITE}"

		cp "$new_CONFIG_FILE_LOCATION" "$CONFIG_FILE_location"
	else
		echo -e "${YELLOW}[-] ${BLUE}Configuration file doesn't exist in the github folder${WHITE}"
	fi
}

delete_syncscript() {
	if [[ -f "$SYNC_SCRIPT_location" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Removing configuration syncscript from your local machine${WHITE}"

		rm "$SYNC_SCRIPT_location"

		if [[ -d "$git_SYNC_SCRIPT_folder" ]]; then
			echo -e "${GREEN}[+] ${BLUE}Updating the github repo syncing the configuration syncscripts${WHITE}"

			cd "$SYNC_SCRIPT_folder" || exit
			git add .
			git commit -m "Removing $SYNC_SCRIPT as commanded by dcSAGC"
			git push -u origin main
			cd "$CURRENT_LOCATION" || exit
		else
			echo -e "${YELLOW}[-] ${BLUE}Configuration syncscript is not being synced with any github repo${WHITE}"
		fi
	else
		echo -e "${YELLOW}[-] ${BLUE}Configuration syncscript doesn't exist!${WHITE}"
	fi
}

delete_git_folder_and_repo() {
	if [[ -d "$GIT_MAIN_FOLDER_location" ]]; then
		echo -e "${GREEN}[+] ${BLUE}Deleting the github repository containing configuration file${WHITE}"

		cd "$GIT_MAIN_FOLDER_location" || exit
		gh repo delete --confirm
		cd "$CURRENT_LOCATION" || exit

		echo -e "${GREEN}[+] ${BLUE}Deleting the github folder containing configuration file from your local machine${WHITE}"

		rm -rf "$GIT_MAIN_FOLDER_location"
	else
		echo -e "${YELLOW}[-] ${BLUE}Github folder containing configuration file doesn't exist!${WHITE}"
	fi
}

delete_alias() {
    ## Checking whether the specified remote repo alias exists or not
	ALIAS_TEST=$(cat "$SHELL_file" | grep -q "$ALIAS"= && echo 69)

	if [[ $ALIAS_TEST == 69 ]]; then
		echo -e "${GREEN}[+] ${BLUE}Removing the alias: $ALIAS from SHELL config file${WHITE}"

		## Adding support for macOS and other linux distros.. since sed is a bit diff on BSD based distros.
		KERNEL=$(uname -s)
		if [[ $KERNEL == Darwin ]]; then
			## Using this method to edit links also.. incase your configuration file is a link itself!
			if [[ -L "$SHELL_file" ]]; then
				SHELL_CONFIG=$(readlink "$SHELL_file")
				sed -i '' "/alias $ALIAS/d" "$SHELL_CONFIG"
			else
				sed -i '' "/alias $ALIAS/d" "$SHELL_file"
			fi
		else
			## Using this method to edit links also.. incase your configuration file is a link itself!
			if [[ -L "$SHELL_file" ]]; then
				SHELL_CONFIG=$(readlink "$SHELL_file")
				sed -i "/alias $ALIAS/d" "$SHELL_CONFIG"
			else
				sed -i "/alias $ALIAS/d" "$SHELL_file"
			fi
		fi
	else
		echo -e "${YELLOW}[-] ${BLUE}Alias: $ALIAS doesn't exist in SHELL config file!${WHITE}"
	fi
}
# </start>

# Message and Error functions
# <start>
MSG_source_shell_config_file() {
	echo -e "${CYAN}[^]${WHITE} ${YELLOW}Source your SHELL configuration file..${WHITE}"
}

_EXIT_(){
    echo -e "${RED}[!] ${WHITE}Exitting the tool..${WHITE}"
    echo

    exit 0
}

ERROR_invalid_input(){
    echo -e "${RED}ERROR:${BLUE} Invalid choice selected${WHITE}"
    _EXIT_
}

# </start>

# Utility functions
# <start>
banner() {
	echo "${BANNER}"
	echo
}

shellcheck() {
    # Storing the path to shell config file in SHELL_file variable
	if [[ $SHELL_TYPE == fish ]]; then
		SHELL_file=~/.config/fish/config.fish
	elif [[ $SHELL_TYPE == bash ]]; then
		SHELL_file=~/.bashrc
	elif [[ $SHELL_TYPE == zsh ]]; then
		SHELL_file=~/.zshrc
	else
		echo -e "${RED}ERROR${WHITE}: You are using unsupported shell type! - '${ORANGE}$SHELL_TYPE${WHITE}'"
		echo -e "${RED}[!] ${WHITE}Exitting the tool.."

		exit 0
	fi
}

manipulate_and_store_variables() {
	## Script execution location and script presence location:
	CURRENT_LOCATION=$(pwd)
    SCRIPT_LOCATION=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

	## Extracting names of files and folders from given location :
    defaults_LOCATION="$SCRIPT_LOCATION/.defaults"
    MODE="${script_args[@]}"
	SHELL_LOCATION=$(echo "$SHELL")
	SHELL_TYPE="${SHELL_LOCATION##*/}"
	SYNC_SCRIPT="${SYNC_SCRIPT_location##*/}"
	SYNC_SCRIPT_folder="${SYNC_SCRIPT_location%/*}"
	git_SYNC_SCRIPT_folder="$SYNC_SCRIPT_folder/.git" ## We got without a '/'
	CONFIG_FILE="${CONFIG_FILE_location##*/}"

    ## Sourcing .defaults file if -g arg is not given and it's not in default mode
    if [[ "$GIT_MAIN_FOLDER_location" == "" ]] && [[ "$MODE" != default ]]; then
        if [[ -f "$defaults_LOCATION" ]]; then
            echo -e "${GREEN}[+] ${BLUE}Sourcing .defaults file${WHITE}"

            source "$defaults_LOCATION"
        else
            banner

        	echo -e "${RED}ERROR: ${GREEN}-g${BLUE} arg not specified, neither .defaults file exists${WHITE}"
            _EXIT_
        fi
    fi

    ## Handling with and without '/' input to -g arg
	check_SLASH="${GIT_MAIN_FOLDER_location##*/}"
	if [[ $check_SLASH == "" ]]; then
		## We got with a '/'
		new_CONFIG_FILE_LOCATION="$GIT_MAIN_FOLDER_location$CONFIG_FILE"
	else
		## We got without '/'
		new_CONFIG_FILE_LOCATION="$GIT_MAIN_FOLDER_location/$CONFIG_FILE"
	fi
}
# </start>

# -------------------------------
##     :Script starts here:
# -------------------------------

while [ $OPTIND -le "$#" ]
do
    if getopts m:s:a:g:c:h input
    then
        case "${input}" in

		s) SYNC_SCRIPT_location=${OPTARG} ;;
		a) ALIAS=${OPTARG} ;;
		g) GIT_MAIN_FOLDER_location=${OPTARG} ;;
		c) CONFIG_FILE_location=${OPTARG} ;;
		h) echo "${USAGE}" && exit 0 ;;
		*)
			banner
			echo -e "${RED}ERROR${WHITE}: Invalid option given: -'${ORANGE}$input${WHITE}'"
            _EXIT_
			;;
        esac
    else
        script_args+=("${!OPTIND}")
        ((OPTIND++))
    fi
done

manipulate_and_store_variables
shellcheck

## Creating the syncing files logic :
if [[ "$MODE" == "create" ]]; then
	banner

	## Configuration file creation condition
    fav_text_editor
	create_config_file

	## Local Github folder creation condition
	create_git_folder

	## Checking if git folder is git initialised.. if not.. initialising it
    initialise_git
	## Readme file creation condition
	create_readme

	## Moving config file to git folder
	move_config_to_git_folder

	## Creating link to config file in original location
	create_link_to_config

	## creating syncscript and making it executable
    create_syncscript

	## If the sync script's folder is related to some git repo.. then update the remote repo..
	push_syncscript

	## Updating the shell config file for the alias to edit(and update simultaneously) this config file
    create_alias

	## Syncing the configuration file added in it's git folder using just created sync scripts..
    sync_configuration_file

	## Message to ask the user to source their configuration file
	MSG_source_shell_config_file

## Creating the logic for undoing the mess the script made with create mode:
elif [[ "$MODE" == "delete" ]]; then
	banner

	## Removing link
	delete_link

	## Placing original configuration file to where it belongs
	put_back_config_file

	## Handling the Configuration syncscript in local and remote repo
	delete_syncscript

	## Handling the config file in git folder and remote repo
	delete_git_folder_and_repo

	## Handling alias added into the SHELL configuration file
	delete_alias

	## Message to ask the user to source their configuration file
    echo
	MSG_source_shell_config_file

## Logic for storing default values
elif [[ "$MODE" == "default" ]]; then
    banner

    if [[ "$ALIAS" != "" ]] || [[ "$CONFIG_FILE_location" != "" ]] || [[ "$SYNC_SCRIPT_location" != "" ]] ; then
		echo -e "${RED}ERROR${WHITE}: Using unsupported arg(s), ${CYAN}default${WHITE} mode supports only the usage of ${GREEN}-g${WHITE} arg"
    	echo -e "${RED}[!] ${WHITE}Ignoring args other then ${GREEN}-g${WHITE}"
        echo
    fi

    defaults_LOCATION=$SCRIPT_LOCATION/.defaults
    if [[ "$GIT_MAIN_FOLDER_location" != "" ]]; then

        if [[ ! -f "$defaults_LOCATION" ]]; then
    	    echo -e "${GREEN}[+] ${BLUE}Writing into .defaults file${WHITE}"

            echo GIT_MAIN_FOLDER_location="$GIT_MAIN_FOLDER_location" > "$defaults_LOCATION"
            echo
        else
    	    echo -e "${CYAN}[~] ${BLUE}.defaults file already exists with following content${WHITE}"
            cat "$defaults_LOCATION"
            
            read -rp "$(echo -e "${GREEN}[*] ${CYAN}Do you want to over-write the contents of it? [y/n]: ${WHITE} ")" ICCHA

            if [[ "$ICCHA" == y ]]; then
    	        echo -e "${GREEN}[+] ${BLUE}Over-writing into .defaults file${WHITE}"

                echo "GIT_MAIN_FOLDER_location=$GIT_MAIN_FOLDER_location" > "$defaults_LOCATION"
                echo
            elif [[ "$ICCHA" == n ]]; then
    	        echo -e "${CYAN}[~] ${BLUE}Skipping over-writing of .defaults file${WHITE}"
                echo
            else 
                ERROR_invalid_input
            fi
        fi
    else
    	echo -e "${YELLOW}[-] ${GREEN}-g${BLUE} arg not specified${WHITE}"
        echo
    fi

## The fuck you saying?
else
	banner

	echo -e "${RED}ERROR${WHITE}: Invalid mode selected - '${ORANGE}$MODE${WHITE}'"
    _EXIT_
fi